from Tests.TestUtils import *


class ResponseTests(TestCase):
    def testRegisterSuccessResponse(self):
        # Given
        clientID = uuid.UUID('fe81c36a-293a-461e-96d0-4bacdb95937d')
        payload = RegisterSuccessResponse(VERSION, clientID)

        # When
        actual = payload.pack()

        # Then
        expected = b'\x01' + b'\xd0\x07'  # header
        expected += b'\x10\x00\x00\x00' + b'\xfe\x81\xc3j):F\x1e\x96\xd0K\xac\xdb\x95\x93}'
        Assert.equals(actual, expected)

    def testClientListResponse(self):
        # Given
        payload = ClientListResponse(VERSION, [dummyClient1, dummyClient2])

        # When
        actual = payload.pack()

        # Then
        expected = b'\x01' + b'\xd1\x07'  # header
        expected += b'\x1e\x02\x00\x00'
        expected += b'\xb1\t\x83\x1e\x00\xc8Ba\xa3\x07\x19\x80\x97\xf9\xbfS'
        expected += b'User1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        expected += b'\x8a\xe2\x1a\x11]\x04K\x92\xb4\x837\x93SB\x90s'
        expected += b'User2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        Assert.equals(actual, expected)

    def testPublicKeyResponse(self):
        # Given
        clientID = uuid.UUID('fe81c36a-293a-461e-96d0-4bacdb95937d')
        payload = PublicKeyResponse(VERSION, clientID, publicKey1)

        # When
        actual = payload.pack()

        # Then
        expected = b'\x01' + b'\xd2\x07'  # header
        expected += b'\xb0\x00\x00\x00' + clientID.bytes + publicKey1
        Assert.equals(actual, expected)

    def testMessageSentResponse(self):
        # Given
        clientID = uuid.UUID('fe81c36a-293a-461e-96d0-4bacdb95937d')
        messageID = 754100
        payload = MessageSentResponse(VERSION, clientID, messageID)

        # When
        actual = payload.pack()

        # Then
        expected = b'\x01' + b'\xd3\x07'  # header
        expected += b'\x14\x00\x00\x00' + clientID.bytes + b'\xb4\x81\x0b\x00'
        Assert.equals(actual, expected)

    def testMessageListResponse(self):
        # Given
        payload = MessageListResponse(VERSION, [message1, message2])

        # When
        actual = payload.pack()

        # Then
        expected = b'\x01' + b'\xd4\x07'  # header
        expected += b';\x00\x00\x00'  # Payload Size
        expected += dummyClient2.id.bytes + b'\xb2]\xe8\x01' + b'\x0a' + b'\x05\x00\x00\x00' + b'12345'
        expected += dummyClient1.id.bytes + b'\x1f\xd3\xfd\x04' + b'\x0b' + b'\x04\x00\x00\x00' + b'stas'
        Assert.equals(actual, expected)

    def testServerErrorResponse(self):
        # Given
        payload = ServerErrorResponse(VERSION)

        # When
        actual = payload.pack()

        # Then
        expected = b'\x01' + b'\x28\x23' + b'\x00\x00\x00\x00'  # header
        Assert.equals(actual, expected)
